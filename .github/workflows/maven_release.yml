name: Release-Startped

on:
  push:
    branches:
      - main

jobs:
  build_Release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Bump version
        id: bump_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version is $VERSION"

          # split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          # Inicializa la nueva versiÃ³n
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$PATCH
          
          # get the latest commit 
          LATEST_COMMIT=$(git log -1 --pretty=format:'%s')
          echo "Latest commit are $LATEST_COMMIT"
          
          # test the last commit message
          if [[ $LATEST_COMMIT == BREAKING:* ]]; then
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
            elif [[ $LATEST_COMMIT == feat:* ]]; then
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
            else
              NEW_PATCH=$((PATCH + 1))
            fi
                    
          # set new version
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "New version is $NEW_VERSION"

          # set new version in pom
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit 
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build with Maven
        run: mvn clean install

      - name: Commit version bump
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add pom.xml
          git commit -m "${LATEST_COMMIT}: Bump version to ${{ env.new_version }} [skip ci]"
          git tag -a "v${{ env.new_version }}" -m "Release version ${{ env.new_version }}"
          git push origin main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          body: |
            Release version ${{ env.new_version }} generated by GitHub Actions.
          draft: false
          prerelease: false

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: starpep-md-${{ env.new_version }}.jar
          path: target/starpep-md-${{ env.new_version }}.jar

      - name: Create a GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: target/starpep-md-${{ env.new_version }}.jar
          tag_name: "v${{ env.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Set local dependencies
        run: |
          mkdir -p $HOME/.m2
          cp  $GITHUB_WORKSPACE/.github/workflows/maven-settings.xml $HOME/.m2/settings.xml

      - name: Publish to GitHub Packages Apache Maven
        run: mvn deploy -e -X -s $HOME/.m2/settings.xml
        env:
          GITHUB_ACTOR: ${{ secrets.USER_NAME }}
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}